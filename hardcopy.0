 ~/c/s/s/vlive  40.scd  ~/c/s/s/v/crap  49.scd  ~/c/s/s/v/e/7.scd  /S/E/s/TimelineView.sc                                                      X
    if(minX<~thisBeastie[xPos], {~thisBeastie[xPos]=~thisBeastie[xPos]-1});
    if(minX>~thisBeastie[xPos], {~thisBeastie[xPos]=~thisBeastie[xPos]+1});
    if(minY<~thisBeastie[yPos], {~thisBeastie[yPos]=~thisBeastie[yPos]-1});
    if(minY>~thisBeastie[yPos], {~thisBeastie[yPos]=~thisBeastie[yPos]+1});
};

findPartner={
    var minX, minY, distance;
    var nearest;
    var tree;
    minX=maxX;  //x-coördinate of partner, closest to the beastie
    minY=maxY;  //y-coördinate of partner, closest to the beastie

    tree = KDTree(~beasties.collect({ arg x; [x[xPos],x[yPos]] }));
    nearest = tree.nearest([~thisBeastie[xPos], ~thisBeastie[yPos]]);
    minX = nearest[0][0];
    minY = nearest[0][1];
    //distance=max(maxX, maxY);
    //for(0, ~beasties.size-1, {arg k;
    //  if (k!= ~thisIndex,{
    //      d=max((~beasties[k][xPos]-~thisBeastie[xPos]).abs, (~beasties[k][yPos]-~thisBeastie[yPos]).abs);
    //      if(d<distance, {
    //          minX=~beasties[k][xPos];
    //          minY=~beasties[k][yPos];
    //          distance=d;
    //      });
    //  });
    //});
    if(minX<~thisBeastie[xPos], {~thisBeastie[xPos]=~thisBeastie[xPos]-1});
    if(minX>~thisBeastie[xPos], {~thisBeastie[xPos]=~thisBeastie[xPos]+1});
    if(minY<~thisBeastie[yPos], {~thisBeastie[yPos]=~thisBeastie[yPos]-1});
    if(minY>~thisBeastie[yPos], {~thisBeastie[yPos]=~thisBeastie[yPos]+1});
};

determinePartner={arg l;
    ~partnerFound=false;
    for(0, ~beasties.size-1, {arg j;
        if(((l!=j)&&(~beasties[j][xPos]==~thisBeastie[xPos])&&
            (~beasties[j][yPos]==~thisBeastie[yPos])), {
                                                                                                                              344,2-5       68%
